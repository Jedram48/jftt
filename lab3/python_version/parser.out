Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> expression TIMES expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> expression POWER expression
Rule 6     expression -> expression MOD expression
Rule 7     expression -> LPAREN expression RPAREN
Rule 8     expression -> MINUS NUMBER
Rule 9     expression -> NUMBER

Terminals, with rules where they appear

DIVIDE               : 4
LPAREN               : 7
MINUS                : 2 8
MOD                  : 6
NUMBER               : 8 9
PLUS                 : 1
POWER                : 5
RPAREN               : 7
TIMES                : 3
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 3 4 4 5 5 6 6 7 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression MOD expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . MINUS NUMBER
    (9) expression -> . NUMBER

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER          shift and go to state 4

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . MOD expression

    PLUS            shift and go to state 5
    MINUS           shift and go to state 6
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8
    POWER           shift and go to state 9
    MOD             shift and go to state 10


state 2

    (8) expression -> MINUS . NUMBER

    NUMBER          shift and go to state 11


state 3

    (7) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression MOD expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . MINUS NUMBER
    (9) expression -> . NUMBER

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER          shift and go to state 4

    expression                     shift and go to state 12

state 4

    (9) expression -> NUMBER .

    PLUS            reduce using rule 9 (expression -> NUMBER .)
    MINUS           reduce using rule 9 (expression -> NUMBER .)
    TIMES           reduce using rule 9 (expression -> NUMBER .)
    DIVIDE          reduce using rule 9 (expression -> NUMBER .)
    POWER           reduce using rule 9 (expression -> NUMBER .)
    MOD             reduce using rule 9 (expression -> NUMBER .)
    $end            reduce using rule 9 (expression -> NUMBER .)
    RPAREN          reduce using rule 9 (expression -> NUMBER .)


state 5

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression MOD expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . MINUS NUMBER
    (9) expression -> . NUMBER

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER          shift and go to state 4

    expression                     shift and go to state 13

state 6

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression MOD expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . MINUS NUMBER
    (9) expression -> . NUMBER

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER          shift and go to state 4

    expression                     shift and go to state 14

state 7

    (3) expression -> expression TIMES . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression MOD expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . MINUS NUMBER
    (9) expression -> . NUMBER

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER          shift and go to state 4

    expression                     shift and go to state 15

state 8

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression MOD expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . MINUS NUMBER
    (9) expression -> . NUMBER

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER          shift and go to state 4

    expression                     shift and go to state 16

state 9

    (5) expression -> expression POWER . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression MOD expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . MINUS NUMBER
    (9) expression -> . NUMBER

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER          shift and go to state 4

    expression                     shift and go to state 17

state 10

    (6) expression -> expression MOD . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . expression POWER expression
    (6) expression -> . expression MOD expression
    (7) expression -> . LPAREN expression RPAREN
    (8) expression -> . MINUS NUMBER
    (9) expression -> . NUMBER

    LPAREN          shift and go to state 3
    MINUS           shift and go to state 2
    NUMBER          shift and go to state 4

    expression                     shift and go to state 18

state 11

    (8) expression -> MINUS NUMBER .

    PLUS            reduce using rule 8 (expression -> MINUS NUMBER .)
    MINUS           reduce using rule 8 (expression -> MINUS NUMBER .)
    TIMES           reduce using rule 8 (expression -> MINUS NUMBER .)
    DIVIDE          reduce using rule 8 (expression -> MINUS NUMBER .)
    POWER           reduce using rule 8 (expression -> MINUS NUMBER .)
    MOD             reduce using rule 8 (expression -> MINUS NUMBER .)
    $end            reduce using rule 8 (expression -> MINUS NUMBER .)
    RPAREN          reduce using rule 8 (expression -> MINUS NUMBER .)


state 12

    (7) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . MOD expression

    RPAREN          shift and go to state 19
    PLUS            shift and go to state 5
    MINUS           shift and go to state 6
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8
    POWER           shift and go to state 9
    MOD             shift and go to state 10


state 13

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . MOD expression

    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 1 (expression -> expression PLUS expression .)
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8
    POWER           shift and go to state 9
    MOD             shift and go to state 10

  ! TIMES           [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]


state 14

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . MOD expression

    PLUS            reduce using rule 2 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 2 (expression -> expression MINUS expression .)
    $end            reduce using rule 2 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 8
    POWER           shift and go to state 9
    MOD             shift and go to state 10

  ! TIMES           [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]


state 15

    (3) expression -> expression TIMES expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . MOD expression

    PLUS            reduce using rule 3 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 3 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 3 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 3 (expression -> expression TIMES expression .)
    MOD             reduce using rule 3 (expression -> expression TIMES expression .)
    $end            reduce using rule 3 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 3 (expression -> expression TIMES expression .)
    POWER           shift and go to state 9

  ! POWER           [ reduce using rule 3 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]
  ! TIMES           [ shift and go to state 7 ]
  ! DIVIDE          [ shift and go to state 8 ]
  ! MOD             [ shift and go to state 10 ]


state 16

    (4) expression -> expression DIVIDE expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . MOD expression

    PLUS            reduce using rule 4 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 4 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 4 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 4 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 4 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 4 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 4 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 9

  ! POWER           [ reduce using rule 4 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]
  ! TIMES           [ shift and go to state 7 ]
  ! DIVIDE          [ shift and go to state 8 ]
  ! MOD             [ shift and go to state 10 ]


state 17

    (5) expression -> expression POWER expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . MOD expression

    PLUS            reduce using rule 5 (expression -> expression POWER expression .)
    MINUS           reduce using rule 5 (expression -> expression POWER expression .)
    TIMES           reduce using rule 5 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 5 (expression -> expression POWER expression .)
    MOD             reduce using rule 5 (expression -> expression POWER expression .)
    $end            reduce using rule 5 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 5 (expression -> expression POWER expression .)
    POWER           shift and go to state 9

  ! POWER           [ reduce using rule 5 (expression -> expression POWER expression .) ]
  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]
  ! TIMES           [ shift and go to state 7 ]
  ! DIVIDE          [ shift and go to state 8 ]
  ! MOD             [ shift and go to state 10 ]


state 18

    (6) expression -> expression MOD expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression
    (5) expression -> expression . POWER expression
    (6) expression -> expression . MOD expression

    PLUS            reduce using rule 6 (expression -> expression MOD expression .)
    MINUS           reduce using rule 6 (expression -> expression MOD expression .)
    TIMES           reduce using rule 6 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 6 (expression -> expression MOD expression .)
    MOD             reduce using rule 6 (expression -> expression MOD expression .)
    $end            reduce using rule 6 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 6 (expression -> expression MOD expression .)
    POWER           shift and go to state 9

  ! POWER           [ reduce using rule 6 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 5 ]
  ! MINUS           [ shift and go to state 6 ]
  ! TIMES           [ shift and go to state 7 ]
  ! DIVIDE          [ shift and go to state 8 ]
  ! MOD             [ shift and go to state 10 ]


state 19

    (7) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 7 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 7 (expression -> LPAREN expression RPAREN .)

